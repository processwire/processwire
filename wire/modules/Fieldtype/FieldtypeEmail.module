<?php namespace ProcessWire;

/**
 * ProcessWire E-Mail Fieldtype
 *
 * Fieldtype for holding an email address. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 3.x, Copyright 2020 by Ryan Cramer
 * https://processwire.com
 * 
 * @property int allowIDN Allow email in IDN format (0=no, 1=allow domain, 2=allow domain and local)
 *
 * @see Sanitizer::email() for more info about allowIDN
 *
 */
class FieldtypeEmail extends FieldtypeText {

	public static function getModuleInfo() {
		return array(
			'title' => 'E-Mail',
			'version' => 101,
			'summary' => 'Field that stores an e-mail address',
		);
	}

	/**
	 * Get max email address length
	 * 
	 * @return int
	 * 
	 */
	public function getMaxEmailLength() {
		return $this->wire()->database->getMaxIndexLength();
	}

	/**
	 * Get Inputfield module for this Fieldtype
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @return InputfieldEmail
	 * 
	 */
	public function getInputfield(Page $page, Field $field) {
		/** @var InputfieldEmail $inputfield */
		$inputfield = $this->wire()->modules->get('InputfieldEmail'); 
		$inputfield->set('allowIDN', $field->get('allowIDN'));
		$inputfield->addClass($this->className());
		return $inputfield; 
	}

	/**
	 * Sanitize value for page
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param string $value
	 * @return string
	 * 
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		if(strlen($value) > $this->getMaxEmailLength()) return '';
		return $this->wire()->sanitizer->email($value, [ 'allowIDN' => $field->get('allowIDN') ]);
	}

	/**
	 * Get database schema for field
	 * 
	 * @param Field $field
	 * @return array
	 * 
	 */
	public function getDatabaseSchema(Field $field) {
		$len = $this->getMaxEmailLength();
		$schema = parent::getDatabaseSchema($field); 
		$schema['data'] = "varchar($len) NOT NULL default ''";
		
		if($field->hasFlag(Field::flagUnique) != (bool) $field->flagUnique) {
			if($this->wire()->getStatus() >= ProcessWire::statusReady) {
				$fields = $this->wire()->fields;
				$fields->tableTools()->checkUniqueIndex($field);
			}
		}
		
		return $schema;
	}

	/**
	 * Is given value one that doesnâ€™t need to be stored in DB?
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param mixed $value
	 * @return bool
	 * 
	 */
	public function isDeleteValue(Page $page, Field $field, $value) {
		return empty($value);
	}

	/**
	 * Advanced configuration for field
	 * 
	 * @param Field $field
	 * @return InputfieldWrapper
	 * 
	 */
	public function ___getConfigAdvancedInputfields(Field $field) {
		$inputfields = parent::___getConfigAdvancedInputfields($field);
		$fields = $this->wire()->fields;
		$f = $fields->tableTools()->getUniqueIndexInputfield($field); 
		$inputfields->prepend($f);
		return $inputfields;
	}

	/**
	 * Get field configuration
	 *
	 * @param Field $field
	 * @return InputfieldWrapper
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);
		
		/** @var InputfieldRadios $f */
		$f = $this->wire()->modules->get('InputfieldRadios');
		$f->attr('name', 'allowIDN');
		$f->label = $this->_('Allow E-Mails in IDN format?');
		$f->addOption(0, $this->_('No'));
		$f->addOption(1, $this->_x('Allow domain', 'Email sanitizer configuration'));
		$f->addOption(2, $this->_x('Allow domain and local', 'Email sanitizer configuration'));
		$f->attr('value', $field->get('allowIDN'));
		$f->description = $this->_('No: Do not allow IDN format / Allow domain: Allow IDN for the domain only / Allow domain and local: allow IDN for the domain and local part');
		$f->optionColumns = 1;
		if(!$f->attr('value')) $f->collapsed = Inputfield::collapsedYes;
		$inputfields->add($f);
		
		return $inputfields;
	}

	/**
	 * Get array of field names allowed for field/template context
	 *
	 * @param Field $field
	 * @return array
	 *
	 */
	public function ___getConfigAllowContext($field) {
		return array_merge(parent::___getConfigAllowContext($field), [ 'allowIDN' ]);
	}
	
}


